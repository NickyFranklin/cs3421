; before execution, relevant memory is
; Addr   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
; 0x0000 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;
; after execution, relevant memory is
; Addr   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
; 0x0000 00 01 01 02 03 05 08 0D 15 22 00 00 00 00 00
;
addi $a $a 2        ; a = 2, index
addi $b $b 10       ; b = 10, array bound
addi $c $c 0        ; c = 0, arr[index - 1]
addi $d $d 1        ; d = 1, arr[index - 2]
addi $e $e 0        ; Zero out these just in case
addi $f $f 0        ; 6 cycles for initialization
.loop:
lw $e $c            ; $e = arr[index - 1]
lw $f $d            ; $f = arr[index - 2], 10 cycles for loads if not in cache
add $g $e $f        ; $g = arr[index - 1] + arr[index - 2] i.e Fibonacci sum, 1 cycle
sw $g $a            ; Store sum into arr[index], $a is index, 5 cycles if not in cache
addi $a $a 1        ; index++
addi $c $c 1        ; (index - 1) ++
addi $d $d 1        ; (index - 2) ++, 3 cycles for arithmetic
blt $a $b loop      ; if a < b, continue to next iteration, 12 * 2 cycles for taken, 1 cycle for taken
beq $h $h endloop   ; else goto .loop, 2 cycles for taken on last iteration
.endloop:
addi $h $h -1 ; h += -1, setting h to 255 (1 tick)
sw   $h $h ; mem[FF] = FF - flush cache, write to mem[1-7] (5 ticks)
halt ; (1 tick)
; Generate Fibonacci numbers in array with cache flush
